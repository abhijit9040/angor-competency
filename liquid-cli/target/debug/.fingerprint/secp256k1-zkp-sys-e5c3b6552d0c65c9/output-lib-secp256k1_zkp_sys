{"$message_type":"diagnostic","message":"conflicting implementations of trait `Hash` for type `Tag`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs","byte_start":13681,"byte_end":13704,"line_start":437,"line_end":437,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl hash::Hash for Tag {","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-sys-0.4.2\\src\\macros.rs","byte_start":1947,"byte_end":1981,"line_start":64,"line_end":64,"column_start":9,"column_end":43,"is_primary":true,"text":[{"text":"        impl ::core::hash::Hash for $thing {","highlight_start":9,"highlight_end":43}],"label":"conflicting implementation for `Tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs","byte_start":13473,"byte_end":13510,"line_start":422,"line_end":422,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"impl_array_newtype!(Tag, c_uchar, 32);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_array_newtype!","def_site_span":{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-sys-0.4.2\\src\\macros.rs","byte_start":567,"byte_end":598,"line_start":18,"line_end":18,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! impl_array_newtype {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Hash` for type `Tag`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs:422:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_array_newtype!(Tag, c_uchar, 32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `Tag`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl hash::Hash for Tag {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_array_newtype` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `Hash` for type `PedersenCommitment`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs","byte_start":14376,"byte_end":14414,"line_start":473,"line_end":473,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl hash::Hash for PedersenCommitment {","highlight_start":1,"highlight_end":39}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-sys-0.4.2\\src\\macros.rs","byte_start":1947,"byte_end":1981,"line_start":64,"line_end":64,"column_start":9,"column_end":43,"is_primary":true,"text":[{"text":"        impl ::core::hash::Hash for $thing {","highlight_start":9,"highlight_end":43}],"label":"conflicting implementation for `PedersenCommitment`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs","byte_start":14078,"byte_end":14130,"line_start":458,"line_end":458,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_array_newtype!(PedersenCommitment, c_uchar, 64);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_array_newtype!","def_site_span":{"file_name":"C:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-sys-0.4.2\\src\\macros.rs","byte_start":567,"byte_end":598,"line_start":18,"line_end":18,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! impl_array_newtype {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Hash` for type `PedersenCommitment`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\aviii\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\secp256k1-zkp-sys-0.4.0\\src\\zkp.rs:458:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_array_newtype!(PedersenCommitment, c_uchar, 64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `PedersenCommitment`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl hash::Hash for PedersenCommitment {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_array_newtype` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0119`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0119`.\u001b[0m\n"}
